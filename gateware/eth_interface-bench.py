#!/usr/bin/env python3
from eth_interface import EthInterface
from amaranth.sim import Simulator, Tick

if __name__ == "__main__":
    dut = EthInterface(simulation=True)
    inject = dut.inject_data

    def process_usb():
        for _ in range(5):
            yield Tick()

        for _ in range(60):
            yield dut.wb_mux_mac.ack.eq(1)
            yield Tick()
            yield dut.wb_mux_mac.ack.eq(0)
            yield Tick()

        yield dut.usb_in_to_fifo.usb_stream_in.first.eq(1)
        yield dut.usb_in_to_fifo.usb_stream_in.valid.eq(1)
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.first.eq(0)
        yield dut.usb_in_to_fifo.usb_stream_in.valid.eq(1)
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(16)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.valid.eq(0)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.valid.eq(1)
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x01)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x02)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x03)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x04)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x05)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x06)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x07)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x08)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x09)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x0a)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x0b)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x0c)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x0d)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x0e)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x0f)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.payload.eq(0x10)
        yield dut.usb_in_to_fifo.usb_stream_in.last.eq(1)
        yield Tick()
        yield dut.usb_in_to_fifo.usb_stream_in.valid.eq(0)
        yield dut.usb_in_to_fifo.usb_stream_in.last.eq(0)
        yield Tick()
        yield Tick()

        yield dut.wb_mux_mac.ack.eq(1)
        yield Tick()
        yield dut.wb_mux_mac.ack.eq(0)
        yield Tick()

        for _ in range(20):
            yield Tick()

        yield dut.wb_mac_mux.we.eq(1)
        yield dut.wb_mac_mux.cyc.eq(1)
        yield dut.wb_mac_mux.stb.eq(1)
        yield dut.wb_mac_mux.sel.eq(0b1111)
        yield dut.wb_mac_mux.dat_w.eq(0x01020304)
        yield dut.wb_mac_mux.adr.eq(0x0400_0000 + ((16 * (16 + 0) + 0) >> 2))
        yield Tick() 
        yield Tick()    
        yield Tick()
        yield dut.wb_mac_mux.dat_w.eq(0x05060708)
        yield dut.wb_mac_mux.adr.eq(0x0400_0000 + ((16 * (16 + 0) + 4) >> 2))
        yield Tick()
        yield Tick()
        yield dut.wb_mac_mux.dat_w.eq(0x090a0b0c)
        yield dut.wb_mac_mux.adr.eq(0x0400_0000 + ((16 * (16 + 0) + 8) >> 2))
        yield Tick()
        yield Tick()
        yield dut.wb_mac_mux.dat_w.eq(0x0d0e0f10)
        yield dut.wb_mac_mux.adr.eq(0x0400_0000 + ((16 * (16 + 0) + 12) >> 2))
        yield Tick()
        yield Tick()
        yield dut.wb_mac_mux.we.eq(0)
        yield dut.wb_mac_mux.cyc.eq(0)
        yield dut.wb_mac_mux.stb.eq(0)
        yield dut.wb_mac_mux.sel.eq(0)
        yield dut.wb_mac_mux.dat_w.eq(0)
        yield dut.wb_mac_mux.adr.eq(0)
        yield Tick()
        yield Tick()
        yield inject.new_irq.eq(1)
        yield Tick()
        yield inject.new_irq.eq(0)
        yield Tick()
        yield dut.wb_mux_mac.dat_r.eq(0b00001100)
        yield dut.wb_mux_mac.ack.eq(1)
        yield Tick()
        yield dut.wb_mux_mac.dat_r.eq(0)
        yield dut.wb_mux_mac.ack.eq(0)
        yield Tick()
        yield Tick()
        yield Tick()
        yield dut.wb_mux_mac.ack.eq(1)
        yield Tick()
        yield dut.wb_mux_mac.ack.eq(0)
        yield Tick()
        yield inject.usb_out_fifo_w_rdy.eq(1)
        yield inject.usb_out_fifo_size_w_rdy.eq(1)
        yield Tick()
        yield dut.wb_mux_mac.dat_r.eq(16 << 16)
        yield dut.wb_mux_mac.ack.eq(1)
        yield Tick()
        yield dut.wb_mux_mac.dat_r.eq(0)
        yield dut.wb_mux_mac.ack.eq(0)
        for _ in range(20):
            yield Tick()
        yield dut.wb_mux_mac.ack.eq(1)
        yield Tick()
        yield dut.wb_mux_mac.ack.eq(0)


    def process():
        for _ in range(1500):
            yield Tick()

    sim = Simulator(dut)
    sim.add_clock(1.0/50e6,)
    sim.add_sync_process(process)
    sim.add_sync_process(process_usb)

    with sim.write_vcd(f'eth_interface.vcd'):
        sim.run()
